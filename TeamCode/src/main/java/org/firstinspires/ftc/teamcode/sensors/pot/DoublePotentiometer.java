package org.firstinspires.ftc.teamcode.sensors.pot;

import com.qualcomm.robotcore.hardware.HardwareMap;

import org.firstinspires.ftc.robotcore.external.Telemetry;

import java.util.ArrayList;

public class DoublePotentiometer implements Potentiometer {

    //hardware
    private BasicPotentiometer pot1a, pot1b, pot2a, pot2b;
    private BasicPotentiometer pot1, pot2;

    private final double scaleRad = Math.PI / 180;

    //potentiometer tuning for linearization - for later
    public final double OFFSET;
    private static double CLIP_TOP = 30;
    private static double CLIP_BOTTOM = 30;

    //initalize hardware
    public DoublePotentiometer(HardwareMap map, Telemetry telemetry, String n1, String n2, double offset){
        if(n1 == null || n2 == null || n1.isEmpty() || n2.isEmpty()){
            throw new IllegalArgumentException(this.getClass().getSimpleName() + ": invalid name");
        }
        ArrayList normalized = new ArrayList<Double>();
        normalized.add(0);
        normalized.add(1);


        double[] poly1 = {0.339, 0.339, 0.338, 0.329, 0.321, 0.311, 0.304, 0.3, 0.291, 0.28800000000000003, 0.279, 0.269, 0.263, 0.253, 0.249, 0.241, 0.23600000000000002, 0.229, 0.223, 0.217, 0.21, 0.20600000000000002, 0.197, 0.191, 0.186, 0.178, 0.17, 0.162, 0.153, 0.145, 0.137, 0.126, 0.117, 0.106, 0.092, 0.07200000000000001, 0.051000000000000004, 0.025, 0.0, 0.001, 0.001, 0.034, 0.061, 0.079, 0.097, 0.112, 0.123, 0.136, 0.146, 0.153, 0.164, 0.17500000000000002, 0.185, 0.189, 0.2, 0.20700000000000002, 0.217, 0.224, 0.231, 0.24, 0.253, 0.255, 0.268, 0.28, 0.296, 0.305};
        double[] poly2 = {0.339, 0.338, 0.332, 0.323, 0.317, 0.31, 0.301, 0.296, 0.29, 0.28500000000000003, 0.277, 0.266, 0.26, 0.253, 0.247, 0.24, 0.23500000000000001, 0.228, 0.221, 0.213, 0.21, 0.203, 0.196, 0.188, 0.183, 0.17500000000000002, 0.168, 0.161, 0.15, 0.14200000000000002, 0.134, 0.122, 0.113, 0.101, 0.08700000000000001, 0.067, 0.041, 3.229, 3.1, 2.152, 1.746, 1.489, 1.343, 1.169, 1.092, 0.9570000000000001, 0.862, 0.8290000000000001, 0.763, 0.709, 0.653, 0.621, 0.5710000000000001, 0.55, 0.523, 0.506, 0.485, 0.468, 0.442, 0.427, 0.404, 0.385, 0.378, 0.355, 0.35100000000000003, 0.34700000000000003, 0.339};
        double[] poly3 = {0.316, 0.326, 0.34600000000000003, 0.355, 0.367, 0.39, 0.405, 0.429, 0.448, 0.47000000000000003, 0.505, 0.533, 0.5640000000000001, 0.604, 0.637, 0.681, 0.749, 0.789, 0.854, 0.9420000000000001, 1.059, 1.17, 1.31, 1.5270000000000001, 1.719, 2.096, 2.406, 3.212, 3.202, 2.499, 1.837, 1.617, 1.426, 1.262, 1.129, 0.999, 0.894, 0.84, 0.782, 0.736, 0.667, 0.623, 0.599, 0.557, 0.536, 0.509, 0.49, 0.47100000000000003, 0.455, 0.435, 0.41500000000000004, 0.398, 0.383, 0.361, 0.352, 0.34500000000000003, 0.343};
        double[] poly4 = {0.017, 0.0, 0.001, 0.017, 0.043000000000000003, 0.075, 0.091, 0.107, 0.114, 0.128, 0.139, 0.151, 0.161, 0.169, 0.178, 0.188, 0.199, 0.202, 0.212, 0.224, 0.223, 0.23600000000000002, 0.245, 0.255, 0.261, 0.273, 0.28800000000000003, 0.302, 0.308, 0.321, 0.34, 0.35100000000000003, 0.362, 0.377, 0.395, 0.418, 0.442, 0.466, 0.485, 0.523, 0.544, 0.5730000000000001, 0.63, 0.65, 0.7030000000000001, 0.759, 0.8, 0.879, 1.0130000000000001, 1.095, 1.2750000000000001, 1.3900000000000001, 1.601, 1.842, 2.207, 2.8970000000000002};
        double[] cracker1 = {2.068965449202786, 2.068965449202786, 3.103448173804179, 4.7586205331664075, 6.827585982369193, 8.6896548866517, 10.34482724601393, 12.827585785057272, 14.896551234260057, 17.3793097733034, 19.448275222506187, 21.93103376154953, 24.413792300592874, 26.896550839636216, 29.379309378679558, 31.862067917722904, 34.7586195466068, 37.24137808565015, 39.51724007977321, 41.79310207389627, 44.27586061293962, 46.75861915198296, 49.448274235946585, 52.55172240975076, 55.034480948794105, 57.51723948783744, 59.99999802688079, 62.89654965576469, 65.79310128464859, 68.27585982369193, 71.17241145257583, 73.86206653653946, 76.13792853066252, 78.82758361462614, 81.72413524351003, 84.20689378255338, 87.31034195635756, 90.20689358524146, 93.51723830396593, 96.82758302269038, 99.93103119649456, 103.4482724601393, 106.75861717886374, 109.65516880774766, 112.55172043663156, 115.44827206551545, 118.34482369439935, 121.6551684131238, 124.96551313184827, 127.86206476073217, 131.17240947945663, 134.2758576532608, 137.37930582706497, 140.27585745594888, 142.9655125399125, 146.06896071371668, 149.5862019773614, 152.6896501511656, 155.99999486989006, 159.3103395886145, 162.62068430733896, 165.72413248114316, 169.2413737447879, 172.75861500843263, 176.27585627207736, 179.5862009908018};
        double[] cracker2 = {2.068965449202786, 2.2758619941230642, 3.7241378085650143, 5.586206712847522, 7.448275617130029, 9.310344521412537, 11.379309970615322, 13.655171964738386, 15.724137413941172, 18.206895952984514, 20.48275794710758, 22.758619941230645, 25.448275025194267, 27.72413701931733, 30.206895558360674, 32.89655064232429, 35.586205726287915, 38.06896426533126, 40.551722804374606, 43.034481343417944, 45.10344679262073, 47.586205331664075, 50.482756960547974, 53.586205134352156, 55.86206712847522, 58.34482566751856, 60.8275842065619, 63.931032380366084, 66.82758400924999, 69.5172390932136, 72.4137907220975, 74.89654926114085, 77.3793078001842, 79.86206633922754, 82.75861796811144, 85.24137650715478, 88.34482468095895, 272.68964620492716, 276.2068874685719, 279.5172321872964, 282.82757690602085, 285.931025079825, 289.24136979854944, 293.17240415203474, 296.6896454156795, 300.2068866793242, 303.72412794296895, 306.62067957185286, 309.5172312007368, 313.0344724643815, 316.7586102729465, 320.48274808151155, 323.9999893451563, 327.10343751896045, 329.99998914784436, 332.4827476868877, 335.5861958606919, 338.0689543997352, 340.96550602861913, 344.48274729226387, 347.9999885559086, 350.6896436398722, 353.79309181367637, 356.2758503527197, 358.13791925700224, 359.5861950714442, 360.206884706205};
        double[] cracker3 = {182.68964916460598, 185.99999388333046, 189.10344205713463, 192.2068902309388, 195.1034418598227, 198.20689003362688, 201.51723475235133, 205.0344760159961, 208.55171727964083, 211.86206199836528, 215.37930326201, 218.89654452565475, 222.41378578929948, 225.1034408732631, 228.20688904706728, 231.31033722087145, 234.41378539467564, 237.93102665832038, 241.4482679219651, 245.17240573053013, 248.68964699417486, 251.99999171289932, 255.31033643162377, 258.6206811503482, 261.9310258690727, 264.41378440811604, 267.5172325819202, 271.03447384556495, 274.75861165412994, 278.27585291777467, 281.3793010915789, 284.6896458103033, 287.7930939841075, 291.10343870283197, 295.03447305631727, 298.75861086488226, 302.4827486734473, 305.3793003023312, 308.0689553862948, 311.58619664993955, 315.1034379135843, 318.8275757221493, 322.344816985794, 325.86205824943875, 328.96550642324297, 331.4482649622863, 334.5517131360905, 337.03447167513383, 339.72412675909743, 342.8275749329016, 346.34481619654633, 349.44826437035056, 352.5517125441547, 355.03447108319807, 357.5172296222414, 358.9655054366834, 360.206884706205};
        double[] cracker4 = {91.65516939968342, 94.7586175734876, 98.27585883713233, 101.58620355585678, 104.68965172966097, 107.99999644838542, 110.89654807726932, 113.79309970615323, 116.48275479011684, 119.99999605376158, 122.89654768264548, 126.41378894629021, 129.3103405751741, 132.4137887489783, 135.51723692278247, 138.62068509658664, 141.51723672547055, 144.20689180943418, 147.51723652815863, 150.82758124688308, 154.13792596560754, 157.65516722925227, 160.96551194797675, 164.06896012178092, 167.1724082955851, 170.48275301430957, 173.9999942779543, 177.93102863143957, 180.8275802603235, 184.13792497904794, 187.4482696977724, 190.3448213266563, 193.44826950046047, 196.55171767426467, 199.86206239298912, 203.17240711171357, 206.6896483753583, 210.20688963900304, 213.5172343577275, 216.82757907645197, 220.13792379517642, 223.65516505882115, 226.55171668770504, 229.65516486150923, 232.7586130353134, 235.8620612091176, 239.37930247276233, 242.89654373640707, 246.6206815449721, 250.34481935353708, 253.241370982421, 256.7586122460657, 260.2758535097105, 262.9655085936741, 265.6551636776377, 268.96550839636217};

        pot1a = new BasicPotentiometer(map, telemetry, n1, poly1, cracker1);
        pot2a = new BasicPotentiometer(map, telemetry, n2, poly2, cracker2);
        pot1b = new BasicPotentiometer(map, telemetry, n1, poly3, cracker3);
        pot2b = new BasicPotentiometer(map, telemetry, n2, poly4, cracker4);
        pot1 = new BasicPotentiometer(map, telemetry, n1, new double[] {0,1}, new double[] {0,1});
        pot2 = new BasicPotentiometer(map, telemetry, n2, new double[] {0,1}, new double[] {0,1});
        this.OFFSET = offset;
    }

    // see overridden methods
    // some (marked with numbers) allow acces to the individual potentiometers inside the dual unit

    @Override
    public double getMV() {
        return 0;
    }

    public double getMV1(){
        return pot1.getMV();
    }

    public double getMV2(){
        return pot2.getMV();
    }

    @Override
    public double getAngleD() {
        double angle1 = pot1a.getAngleD();
        double angle2 = pot2a.getAngleD();
        double angle3 = pot1b.getAngleD();
        double angle4 = pot2b.getAngleD();

        //double mv1 = pot1a.getMV();
        //double mv2 = pot2b.getMV();

        double d1 = Math.abs(angle1-angle2);
        double d2 = Math.abs(angle3-angle4);

        if(d1>d2) {
            double av = (angle3+angle4)/2;
            double d3 = Math.abs(angle2-av);
            double d4 = Math.abs(angle1-av);
            if(d4>d3) return d3;
            return d4;

        }
        double av = (angle1+angle2)/2;
        double d3 = Math.abs(angle2-av);
        double d4 = Math.abs(angle1-av);
        if(d4>d3) return d3;
        return d4;

        //if(angle1 < CLIP_BOTTOM || angle2 > 360-CLIP_TOP || (angle2 > 180-CLIP_TOP && angle2 < 180 + CLIP_BOTTOM)) return pot1.getAngleD();
        //else if((angle1 < CLIP_BOTTOM + OFFSET && angle1 > OFFSET - CLIP_TOP) || (angle1 < 180 + CLIP_BOTTOM +OFFSET && angle1 > 180 - CLIP_TOP + OFFSET)) return pot2.getAngleD();
        //return (pot1.getAngleD() + pot2.getAngleD())/2;
    }

    @Override
    public double getAngleR() {
      return getAngleD()*scaleRad;
    }

    public boolean isZeroOne(){
        return pot1.isZero();
    }

    public boolean isZeroTwo(){
        return pot2.isZero();
    }

    @Override
    public boolean isZero(){
        return getAngleD() == 0;
    }

    @Override
    public boolean isAvailable() {
        return false;
    }

    public double getAngleD1a(){
        return pot1a.getAngleD();
    }
    public double getAngleD1b(){
        return pot1b.getAngleD();
    }
    public double getAngleD2a(){
        return pot2a.getAngleD();
    }
    public double getAngleD2b(){
        return pot2b.getAngleD();
    }

    public static ArrayList<Double> toArrayList(double[] meow){
        ArrayList<Double> caw = new ArrayList<Double>();
        for(double d : meow) caw.add(d);
        return caw;
    }
}
